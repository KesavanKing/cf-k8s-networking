# Route (new CRD, schema feedback welcome!)
# 1:1 with CCv3 Route

apiVersion: networking.cloudfoundry.org/v1alpha1
kind: Route
metadata:
 name: cc-route-guid
 annotations: {}
   # in the future import annotations from CC v3 Route, e.g.
   # user/client provided annotations
 labels:
   app.kubernetes.io/name: cc-route-guid
   app.kubernetes.io/version: cloud-controller-api-version
   app.kubernetes.io/managed-by: cloudfoundry
   app.kubernetes.io/component: cf-networking
   app.kubernetes.io/part-of: cloudfoundry
   cloudfoundry.org/org_guid: cc-org-guid
   cloudfoundry.org/space_guid: cc-space-guid
   cloudfoundry.org/domain_guid: cc-domain-guid
   cloudfoundry.org/route_guid: cc-route-guid
   # in the future import labels from CC v3 Route, e.g.
   # user/client provided labels
spec:
  host: hostname
  path: /some/path
  url: hostname.apps.example.com/some/path  # CAPI guarantees this is unique
  domain:
    name: apps.example.com
    internal: false
  destinations:
  - weight: 80 # weights must add to 100
    port: 8080
    guid: destination-guid-1
    selector:
      matchLabels:
        cloudfoundry.org/app_guid: cc-app1-guid
        cloudfoundry.org/process_type: web
    app:
      guid: cc-app1-guid
      process:
        type: web
  - weight: 20 # weights must add to 100
    port: 9000
    guid: destination-guid-2
    selector:
      matchLabels:
        cloudfoundry.org/app_guid: cc-app1-guid
        cloudfoundry.org/process_type: other-web
    app:
      guid: cc-app2-guid
      process:
        type: other-web
status:
  conditions:
    type: Ready
    status: False  # starts out False
                   # only changed by the Istio Routing Controller after it
                   # completes the reconciliation (creates child objects)
                   # maybe it also waits for children to become "Ready"?
